// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.DataAccess;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220629125908_Initial migration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("Server.DataAccess.Model.Cities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegionsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("region_id");

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("RegionsId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Server.DataAccess.Model.MobilAku", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CitiesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cities_id");

                    b.Property<int>("RegionsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("region_id");

                    b.Property<string>("additional_info")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_num")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("back_sites")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("battery_age")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("current_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("ideal_working_hour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("max_ac_duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("mx_afad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("n_of_ac")
                        .HasColumnType("INTEGER");

                    b.Property<int>("n_of_air_con")
                        .HasColumnType("INTEGER");

                    b.Property<int>("n_of_generator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("n_of_ne")
                        .HasColumnType("INTEGER");

                    b.Property<int>("n_of_partial_age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("recommendation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("remaining_battery_lifetime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("remaining_battery_lifetime_cast_int")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("report_file_process_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("technology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tenant_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("totalpower_loc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("CitiesId");

                    b.HasIndex("RegionsId");

                    b.ToTable("MobilAku");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Regions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Cities", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Regions", "Regions")
                        .WithMany("Cities")
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Server.DataAccess.Model.MobilAku", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Cities", "Cities")
                        .WithMany("MobilAku")
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.DataAccess.Model.Regions", "Regions")
                        .WithMany("MobilAku")
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Cities", b =>
                {
                    b.Navigation("MobilAku");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Regions", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("MobilAku");
                });
#pragma warning restore 612, 618
        }
    }
}
